services:
  db:
    image: postgres:17-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks:
      - {{ project_name }}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  broker:
    image: "rabbitmq:alpine"
    restart: always
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 10s
      retries: 5

  result:
    image: "redis:alpine"
    restart: always
    networks:
      - {{ project_name }}

  app:
    build:
      dockerfile: Dockerfile
      context: .
    restart: always
     command: >
      sh -c "python manage.py makemigrations --dry-run --check &&
            python manage.py migrate --no-input &&
            python manage.py runserver
    ports:
      - "8081:8081"
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_healthy
      result:
        condition: service_started
    environment:
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      REDIS_URL: ${REDIS_URL}
      PORT: 8081
    networks:
      - {{ project_name }}

  celery:
    build:
      dockerfile: Dockerfile
      context: .
    restart: always
    command: celery --app={{ project_name }}.celery_app worker --loglevel=info
    depends_on:
      db:
        condition: service_started
      broker:
        condition: service_healthy
      result:
        condition: service_started
    environment:
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      REDIS_URL: ${REDIS_URL}
    networks:
      - {{ project_name }}

  celery_beat:
    build:
      dockerfile: Dockerfile
      context: .
    restart: always
    command: celery --app={{ project_name }}.celery_app beat --scheduler django_celery_beat.schedulers:DatabaseScheduler --loglevel=info
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_healthy
      result:
        condition: service_started
      app:
        condition: service_started
    environment:
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      REDIS_URL: ${REDIS_URL}
    networks:
      - {{ project_name }}

volumes:
  dbdata:
    name: {{ project_name }}_dbdata

networks:
  {{ project_name }}:
    driver: bridge